;(function ($,window,document, undefined) {
	"use strict";
	 var _defaults = {
		date: null,
        bounds: [],
        value: null,
        onmouseup: function (param) { },
        onmousedown: function (param) { },
		onmousemove: function (param) { },
        onchange: function (value) { },
		label: function(tick){
			return Math.round(tick);
		}
    };

	function TrackLine($ele, opts) {
        this.el = targetDom = $ele;
        options = $.extend(_defaults, opts || {});
        _createScales();
    };

	var _move = false;
	var lastX = 0;
	var _position = 0;
	var NewX = 0;
	var targetDom = null;
	var options = {};

	TrackLine.prototype = {
        getValue: function () {
            return options.value;
        },

		setValue : function(val){
			options.value = val;
			_position = _getPositionForValue(options.value);
			$(".timelineProgress").css("left",_position + "px");
		},

		setBounds : function(bounds){
			options.bounds = bounds;
			_createBounds($(".dp-timelineMain"));
		},

		addBound : function(bound){
			options.bounds.push(bound);
			_createBounds($(".dp-timelineMain"));
		},

		setDate : function(val){
			options.date = val;
			_createScales();
		}
        
    };

	$.fn.trackLime = function (options) {
        options = $.extend(_defaults, options || {});

        return new TrackLine($(this), options);
    }

	function _createScales(){
	
		options.date = _DateFormat(options.date,"yyyy-MM-dd");

		options.min = new Date(options.date + " 00:00:00");
		options.max = new Date(options.date + " 23:59:59");
		_createScale();
	}

	function _createScale(){
		targetDom.empty();
		//var options = $.extend({}, scaleDefaults, opt),
		var _tw =  targetDom.width();
		targetDom.css("min-height","65px");
		var container = $("<div class='dp-timelineMain' style='position: relative;width:"+ _tw +"px;height:100%;margin:0 auto;'><div class='playbox' onclick='oTrack.playOrpause()' id='playBox'><span class='icons'></div></div>").appendTo(targetDom);

		_createTicks(container);

		_createBounds(container);
		_createProgress(container);
	}

	function _createTicks(container){
		var start,_index=0,
			end = options.min,
			allWidth = 0, tickline, width , tick;
		do {
			start = _index;
			end = _index + 1;

			tick = _createTick(_index, options);
			tickline = $("<div class='timeHour' style='display:inline-block'></div>").appendTo(container);
			tickline.css("width", parseInt( container.width() / 24 - 1) + "px");
			allWidth += parseInt( container.width()  / 24 - 1);

			tickline.append(tick);

			if (end == 24) {
				tick = (_createTick(end, options));
				tick.addClass("last");
				tickline.append(tick);
				allWidth += 24;
			}
			_index = end;
		}while (_index < 24) 
		$(".dp-timelineMain").css("width", allWidth + "px");
		
	}

	function _createTick(start , options){
		var label = $("<div class='timeNumber'/>");			
		label.text(options.label(start));
		
		return label;
	}

	//创建有效区域
	function _createBounds(container){
		if(options.bounds == null || toString.call(options.bounds) != "[object Array]"){
			return;
		}
		$(".runPart").remove();

		for(var i=0;i<options.bounds.length;i++){
			var _min = options.bounds[i].min;
			var _max = options.bounds[i].max;
			//toString.call(_min) == "[object Date]"
			var _left = _getPositionForValue(_min);
			var _width = _getPositionForValue(_max) - _left;
			var _bound = $("<div class='runPart'></div>").appendTo(container);
			_bound.css("left",_left+"px");
			_bound.css("width",_width+"px");
		}

	}

	// 创建小点图标
	function _createProgress(container){
		//timelineProgress
		if (options.value == null || !(options.min <= options.value && options.value <= options.max))
		{
			options.value = options.min;
		}

		_position = _getPositionForValue(options.value);
		var timelineProgress = $("<div class='timelineProgress'/>");
		timelineProgress.css("left",_position + "px");
		container.append(timelineProgress);
		//addEventListener
		$(document).on("mousedown", '.timelineProgress', _mousedown);
		$(document).on("mouseup",  _mouseup);
		$(document).on("mousemove", _mousemove);
		$(document).on("mouseout", '.timelineProgress', _mouseout);
		$(document).on("mouseover", '.timelineProgress', _mouseover);

	}

	function _mousedown(event){
		lastX = event.clientX;
		event.preventDefault();
		_move = true;
		options.onmousedown(options.value);
	}

	function _mouseup(event){
		event.preventDefault();
		if (_move) {
			_move = false;
			NewX = 0;
		}
		options.onmouseup(options.value);
	}

	function _mousemove(event){
		event.preventDefault();
		NewX = event.clientX;
		if (_move) {
			var mcs = NewX - lastX;
			lastX = NewX;
			if (mcs < 0) {
				if (_position - (-mcs) > 0) {
					_position = _position - (-mcs)
				}
			} else {
				if (_position + mcs < ($(".dp-timelineMain").width())) {
					_position = _position + mcs
				} else {
					_position = ($(".dp-timelineMain").width())
				}
			}
			//timechange();
			$('.timelineProgress').css("left", _position);
			options.value = _getValueForPosition(_position);
			options.onmousemove(options.value);
		}
	}

	function _mouseout(event){
	}

	function _mouseover(){
	}

	//时间转位置
	function  _getPositionForValue(value){
		var ratio = (value - options.min) / (options.max - options.min),
			availableWidth = $(".dp-timelineMain").width(),
			parentPosition = targetDom.offset().left,
			shift = 0;

		return ratio * availableWidth;// + parentPosition - shift;
		//return ratio * (availableWidth - 2 * this.cache.width.outer) + parentPosition + shift;
	}
	//位置转时间
	function _getValueForPosition(position){
		var raw = parseInt(position) / $(".dp-timelineMain").width() * (options.max - options.min);
		var timestamp = raw + options.min.getTime();
		var date = new Date(timestamp);
		var Y = date.getFullYear() + '-';
		var M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';
		var D = (date.getDate() < 10 ? '0'+date.getDate() : date.getDate())+ ' ';
		var h = (date.getHours() < 10  ? '0'+date.getHours() : date.getHours()) + ':';
		var m = (date.getMinutes() < 10  ? '0'+date.getMinutes() : date.getMinutes()) + ':';
		var s = (date.getSeconds() < 10  ? '0'+date.getSeconds() : date.getSeconds());
		return Y+M+D+h+m+s;
	}


	function _DateFormat(_date, format){
		if ( _date == null){
			_date = new Date();
		}
		if(toString.call(_date) == "[object String]" ){
			_date = new Date(_date.replace(new RegExp(/-/gm) ,"/"));
			if(_date.toString() === "Invalid Date"){
				_date = new Date();
			}
		}

		var o = { 
			"M+" : _date.getMonth()+1, //month 
			"d+" : _date.getDate(),    //day 
			"h+" : _date.getHours(),   //hour 
			"m+" : _date.getMinutes(), //minute 
			"s+" : _date.getSeconds(), //second 
			"q+" : Math.floor((_date.getMonth()+3)/3),  //quarter 
			"S" : _date.getMilliseconds() //millisecond 
		} 
		if(/(y+)/.test(format)) 
			format=format.replace(RegExp.$1,  (_date.getFullYear()+"").substr(4 - RegExp.$1.length)); 
		for(var k in o){
			if(new RegExp("("+ k +")").test(format)) {
				format = format.replace(RegExp.$1,  RegExp.$1.length==1 ? o[k] :  ("00"+ o[k]).substr((""+ o[k]).length)); 
			}
		}
		return format; 
	
	}


})(jQuery,window,document);